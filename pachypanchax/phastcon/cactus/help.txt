Usage: runProgressiveCactus.sh [options] <seqFile> <workDir> <outputHalFile>

Required Arguments:
  <seqFile>		File containing newick tree and seqeunce paths paths.
			(see documetation or examples for format).
  <workDir>		Working directory (which can grow exteremely large)
  <outputHalFile>	Path of output alignment in .hal format.

Options:
  -h, --help            show this help message and exit
  --optionsFile=OPTIONSFILE
                        Text file containing command line options to use as
                        defaults
  --database=DATABASE   Database type: tokyo_cabinet or kyoto_tycoon [default:
                        kyoto_tycoon]
  --outputMaf=OUTPUTMAF
                        [DEPRECATED use hal2maf on the ouput file instead]
                        Path of output alignment in .maf format.  This option
                        should be avoided and will soon be removed.  It may
                        cause sequence names to be mangled, and use a
                        tremendous amount of memory.
  --configFile=CONFIGFILE
                        Specify cactus configuration file
  --legacy              Run cactus directly on all input sequences without any
                        progressive decomposition (ie how it was originally
                        published in 2011)
  --autoAbortOnDeadlock
                        Abort automatically when jobTree monitor suspects a
                        deadlock by deleting the jobTree folder. Will
                        guarantee no trailing ktservers but still  dangerous
                        to use until we can more robustly detect  deadlocks.
  --overwrite           Re-align nodes in the tree that have already been
                        successfully aligned.
  --rootOutgroupDists=ROOTOUTGROUPDISTS
                        root outgroup distance (--rootOutgroupPaths must be
                        given as well)
  --rootOutgroupPaths=ROOTOUTGROUPPATHS
                        root outgroup path (--rootOutgroup must be given as
                        well)
  --root=ROOT           Name of ancestral node (which must appear in NEWICK
                        tree in <seqfile>) to use as a root for the alignment.
                        Any genomes not below this node in the tree may be
                        used as outgroups but will never appear in the output.
                        If no root is specifed then the root of the tree is
                        used.

  Logging options:
    Options that control logging

    --logOff            Turn off logging. (default is CRITICAL)
    --logInfo           Turn on logging at INFO level. (default is CRITICAL)
    --logDebug          Turn on logging at DEBUG level. (default is CRITICAL)
    --logLevel=LOGLEVEL
                        Log at level (may be either OFF/INFO/DEBUG/CRITICAL).
                        (default is CRITICAL)
    --logFile=LOGFILE   File to log in
    --rotatingLogging   Turn on rotating logging, which prevents log files
                        getting too big.

  jobTree core options:
    Options to specify the location of the jobTree and turn on stats
    collation about the performance of jobs.

    --stats             Records statistics about the job-tree to be used by
                        jobTreeStats. default=False

  jobTree options for specifying the batch system:
    Allows the specification of the batch system, and arguments to the
    batch system/big batch system (see below).

    --batchSystem=BATCHSYSTEM
                        The type of batch system to run the job(s) with,
                        currently can be 'singleMachine'/'parasol'/'acidTest'/
                        'gridEngine'/'lsf'. default=singleMachine
    --maxThreads=MAXTHREADS
                        The maximum number of threads (technically processes
                        at this point) to use when running in single machine
                        mode. Increasing this will allow more jobs to run
                        concurrently when running on a single machine.
                        default=4
    --parasolCommand=PARASOLCOMMAND
                        The command to run the parasol program default=parasol

  jobTree options for cpu/memory requirements:
    The options to specify default cpu/memory requirements (if not
    specified by the jobs themselves), and to limit the total amount of
    memory/cpu requested from the batch system.

    --defaultMemory=DEFAULTMEMORY
                        The default amount of memory to request for a job (in
                        bytes), by default is 2^31 = 2 gigabytes,
                        default=2147483648
    --defaultCpu=DEFAULTCPU
                        The default the number of cpus to dedicate a job.
                        default=1
    --maxCpus=MAXCPUS   The maximum number of cpus to request from the batch
                        system at any one time. default=9223372036854775807
    --maxMemory=MAXMEMORY
                        The maximum amount of memory to request from the batch
                        system at any one time. default=9223372036854775807

  jobTree options for rescuing/killing/restarting jobs:
    The options for jobs that either run too long/fail or get lost (some
    batch systems have issues!)

    --retryCount=RETRYCOUNT
                        Number of times to retry a failing job before giving
                        up and labeling job failed. default=0
    --maxJobDuration=MAXJOBDURATION
                        Maximum runtime of a job (in seconds) before we kill
                        it (this is a lower bound, and the actual time before
                        killing the job may be longer).
                        default=9223372036854775807
    --rescueJobsFrequency=RESCUEJOBSFREQUENCY
                        Period of time to wait (in seconds) between checking
                        for missing/overlong jobs, that is jobs which get lost
                        by the batch system. Expert parameter. (default is set
                        by the batch system)

  jobTree big batch system options:
    jobTree can employ a secondary batch system for running large
    memory/cpu jobs using the following arguments:

    --bigBatchSystem=BIGBATCHSYSTEM
                        The batch system to run for jobs with larger
                        memory/cpus requests, currently can be
                        'singleMachine'/'parasol'/'acidTest'/'gridEngine'.
                        default=none
    --bigMemoryThreshold=BIGMEMORYTHRESHOLD
                        The memory threshold above which to submit to the big
                        queue. default=9223372036854775807
    --bigCpuThreshold=BIGCPUTHRESHOLD
                        The cpu threshold above which to submit to the big
                        queue. default=9223372036854775807
    --bigMaxCpus=BIGMAXCPUS
                        The maximum number of big batch system cpus to allow
                        at one time on the big queue.
                        default=9223372036854775807
    --bigMaxMemory=BIGMAXMEMORY
                        The maximum amount of memory to request from the big
                        batch system at any one time.
                        default=9223372036854775807

  jobTree miscellaneous options:
    Miscellaneous options

    --jobTime=JOBTIME   The approximate time (in seconds) that you'd like a
                        list of child jobs to be run serially before being
                        parallelized. This parameter allows one to avoid over
                        parallelizing tiny jobs, and therefore paying
                        significant scheduling overhead, by running tiny jobs
                        in series on a single node/core of the cluster.
                        default=30
    --maxLogFileSize=MAXLOGFILESIZE
                        The maximum size of a job log file to keep (in bytes),
                        log files larger than this will be truncated to the
                        last X bytes. Default is 50 kilobytes, default=50120
    --command=COMMAND   The command to run (which will generate subsequent
                        jobs). This is deprecated

  kyoto_tycoon Options:
    Kyoto tycoon provides a client/server framework for large in-memory
    hash tables and is available via the --database option.

    --ktPort=KTPORT     starting port (lower bound of range) of ktservers
                        [default: 1978]
    --ktHost=KTHOST     The hostname to use for connections to the ktserver
                        (this just specifies where nodes will attempt to find
                        the server, *not* where the ktserver will be run)
    --ktType=KTTYPE     Kyoto Tycoon server type (memory, snapshot, or disk)
                        [default: memory]
    --ktCreateTuning=KTCREATETUNING
                        ktserver options when creating db (ex
                        #bnum=30m#msiz=50g)
    --ktOpenTuning=KTOPENTUNING
                        ktserver options when opening existing db (ex
                        #opts=ls#ktopts=p)
